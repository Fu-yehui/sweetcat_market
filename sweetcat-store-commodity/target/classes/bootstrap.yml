spring:
  profiles:
    active: dev
  cloud:
    nacos:
      config:
        server-addr: localhost:8848
        prefix: sweetcat-store-commodity
        group: SWEETCAT_GROUP
        namespace: dev
        file-extension: yml
        shared-configs:
          - dataId: sweetcat-commons.yml
            namespace: dev
            group: SWEETCAT_GROUP
            refresh: True

  shardingsphere:
    props:
      sql:
        show: true
    datasource:
      names: ds0, ds1
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.193.129:3306/sweetcat_market_store_commodity0?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
        username: test
        password: mysqladmin123
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.193.129:3306/sweetcat_market_store_commodity1?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
        username: test
        password: mysqladmin123
    # 分库配置 ， 根据good_id分库
    sharding:
      # 分表配置，根据member_id分表
      tables:
        t_store_commodity_info:
          actual-data-nodes: ds$->{0..1}.t_store_commodity_info$->{0..1}
          logical-table: t_store_commodity_info
          database-strategy:
            inline:
              sharding-column: commodity_id
              algorithm-expression: ds$->{commodity_id % 2}
          table-strategy:
            inline:
              sharding-column: commodity_id
              algorithm-expression: t_store_commodity_info$->{commodity_id % 2}
          key-generator:
            column: commodity_id
            type: SNOWFLAKE
        t_store_commodity_comment:
          actual-data-nodes: ds$->{0..1}.t_store_commodity_comment$->{0..1}
          logical-table: t_store_commodity_comment
          database-strategy:
            inline:
              sharding-column: commodity_id
              algorithm-expression: ds$->{commodity_id % 2}
          table-strategy:
            inline:
              sharding-column: comment_id
              algorithm-expression: t_store_commodity_comment$->{comment_id % 2}
          key-generator:
            column: comment_id
            type: SNOWFLAKE
        t_store_commodity_post_charge:
          actual-data-nodes: ds$->{0..1}.t_store_commodity_post_charge$->{0..1}
          logical-table: t_store_commodity_post_charge
          database-strategy:
            inline:
              sharding-column: charge_id
              algorithm-expression: ds$->{charge_id % 2}
          table-strategy:
            inline:
              sharding-column: charge_id
              algorithm-expression: t_store_commodity_post_charge$->{charge_id % 2}
          key-generator:
            column: charge_id
            type: SNOWFLAKE

# rocketmq 配置
rocketmq:
  name-server: 127.0.0.1:9876
  producer:
    group: sweetcat-store-commodity
    # 发送异步消息失败时的重试次数：默认2
    retry-times-when-send-async-failed: 2
    # 发送同步消息失败时的重试次数：默认2
    retry-times-when-send-failed: 2
    # 发送消息超时时间。默认3s
    send-message-timeout: 3000

# 由于 spring acuator 健康检查会导致服务启动报错：
# org.springframework.dao.InvalidDataAccessApiUsageException: ConnectionCallback; isValid; nested exception is java.sql.SQLFeatureNotSupportedException: isValid
# 但不影响服务注册注册
management:
  health:
    db:
      enabled: false
mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-handlers-package: com.sweetcat.storecommodity.infrastructure.dao.typehandler
